１；　大砲のパーツをくっつける（なんか　二つらしい）
　　パーツの当たり判定を作る
        OBBとOBBの当たり判定？

　　パーツとパーツの最短距離計測
        円柱　と　四角？

　　パーツ同士の場所のローカル化     かんりょー？


２；　大砲を地面に置く　（たぶん　先輩のコードで一発）

３；　発射（アニメーション）
        ボタンで

        <!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="utf-8">
    <title>Blender Destruction to Three.js</title>
    <style>
      body {
        margin: 0;
      }
    </style>
  </head>
  <body>
    <script type="importmap">
      {
        "imports": {
          "three": "./three.module.js",
          "three/addons/": "./examples/jsm/"
        }
      }
    </script>
    <script type="module">

      import * as THREE from 'three';
      import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100);
      camera.position.set(5, 5, 5);
      camera.lookAt(new THREE.Vector3(0, 0, 0));
      const renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      const dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
      dirLight.position.set(2, 5, 2);
      scene.add(dirLight);
      const light = new THREE.AmbientLight(0x333333);
      scene.add( light );

      const mixers = [];
      const loader = new GLTFLoader();
      loader.load(
        './destruction.glb',
        (gltf) => {
          scene.add(gltf.scene);
          // メッシュとアニメーションを紐づける
          gltf.scene.children.forEach((child, index) => {
              const mixer = new THREE.AnimationMixer(child);
              mixers.push(mixer);
              const action = mixer.clipAction(gltf.animations[index]);
              action.play();
          });
        }
      );

      const clock = new THREE.Clock(true);
      const update = () => {
        requestAnimationFrame(update);

        const delta = clock.getDelta();
        mixers.forEach(mixer => mixer.update(delta));

        renderer.render(scene, camera);
      }
      update();

      const onResize = () => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
      }
      window.addEventListener('resize', onResize);
    </script>
  </body>
</html>



そもそも　どうやって手でできるようにする？